version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.6
  node: circleci/node@5.0.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl --insecure https://kvdb.io/QB1pkedXes7oiqtRaYpVYV/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS == 1 ));
            then
            cd ~/project/backend
            npm install
            npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0

    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0

    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Frontend test
          command: |
            cd frontend
            npm install
            npm run test a

  test-backend:
    docker:
      - image: cimg/node:13.8.0

    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: backend test
          command: |
            cd backend
            npm install
            npm run test a

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0

    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: frontend scan
          command: |
            cd backend
            npm update
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0

    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: frontend scan
          command: |
            cd backend
            npm update
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli

    steps:
      - checkout
      - run:
          name: install tar
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9c:fe:18:7f:8a:3b:d2:90:0b:cf:13:04:e5:39:e2:75"]
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add ansible openssh-client tar unzip
            apk add --update ansible openssh-client tar unzip
            cat .circleci/ansible/inventory.txt
            apk update
            apk upgrade
            apk add unzip 
            apk add curl
            /usr/local/bin/python -m pip install --upgrade pip

      - run:
          name: Install AWS CLI for Ansible
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli

      - run:
          name: Configure server
          command: |
            cat .circleci/ansible/inventory.txt
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0

    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt upgrade -y
            sudo apt install -y awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            echo `cat migrations_dump.txt`

      - run:
          name: Send Migration status to kvdb.io
          command: |
            cat ~/project/backend/migrations_dump.txt
            cd backend
            if grep -q "has been executed successfully." migrations_dump.txt
            then
              echo "MIGRATION WAS SUCCESSFUL"
              export SUCCESS=$(curl https://kvdb.io/QB1pkedXes7oiqtRaYpVYV/migration_${CIRCLE_WORKFLOW_ID:0:7} -d 1)
              echo $SUCCESS
            else
              echo "MIGRATION FAILED"
              export SUCCESS=$(curl https://kvdb.io/QB1pkedXes7oiqtRaYpVYV/migration_${CIRCLE_WORKFLOW_ID:0:7} -d 0)
              echo $SUCCESS
            fi

      - destroy-environment

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli

    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Install System Dependencies
          command: |
            cd frontend
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs

      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url and Deploy Frontend Object
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${BACKEND_IP}"
            echo "API_URL = ${API_URL}"
            echo API_URL=$API_URL >> frontend/.env
            echo NODE_ENV=production >> frontend/.env
            echo ENVIRONMENT=production >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build 
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine

    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9c:fe:18:7f:8a:3b:d2:90:0b:cf:13:04:e5:39:e2:75"]

      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version

      - run:
          name: ENV
          command: |
            echo ENVIRONMENT=production >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
      - run:
          name: Build Artifacts
          command: |
            cd backend
            npm i
            npm run build
            cp package* ./dist
            cd ..
            echo "zip the directory -------"
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files
             echo "mv artifac to ansibble -------"
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files

      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: cimg/node:13.8.0

    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt upgrade -y
            sudo apt install -y curl 
            sudo apt install -y awscli
            aws --version

      - run:
          name: Get backend url and Backend Smoke Test
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "${BACKEND_IP}"
            if curl -s "${API_URL}/api/status" | grep "ok"
            then 
              echo "Smoke Test was Successful"
              exit 0
            else
              echo "Smoke Test Failed"
              exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli

    steps:
      - checkout
      - run:
          name: Save old workflow ID for cleanup
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            OldWorkflowID=${OldWorkflowID#frontend-}

            echo newWorkFlowId: "${CIRCLE_WORKFLOW_ID:0:7}"
            echo OldWorkflowID: "${OldWorkflowID}"  

            echo $OldWorkflowID >> ~/project/old-workflow-id.txt
            cat ~/project/old-workflow-id.txt

      - run:
          name: Update cloudfront distribution
          command: |
            echo OldWorkflowID: "${OldWorkflowID}" 
            cat ~/project/old-workflow-id.txt 
            OldWorkflowID=$(cat ~/project/old-workflow-id.txt)
            echo OldWorkflowID: "${OldWorkflowID}" 

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides \
              WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              OldWorkflowID="${OldWorkflowID}" \
              --tags project=udapeople

      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id, remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`OldWorkflowID\`].Value" --no-paginate --output text)
             OldWorkflowID=${OldWorkflowID#udapeople-}

             echo OldWorkflowID: "${OldWorkflowID}"
             echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"

             export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)

             echo Stack names: "${STACKS[@]}"  
             
             if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
             then
               echo '------------Removing previous stacks------------'
               aws s3 rm "s3://udapeople-frontend-${OldWorkflowID}" --recursive
               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
             else
               echo '------------Cannot cleanup----------------------'
             fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
